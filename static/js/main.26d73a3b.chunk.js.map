{"version":3,"sources":["img/leapp-dashboard-logo.svg","registerServiceWorker.js","DiscoverContext.js","components/FormattedDocstring.js","pages/Actors.js","pages/Models.js","pages/Tags.js","pages/Topics.js","pages/Workflows.js","components/DiscoverProvider.js","App.js","routes.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","DiscoverContext","React","createContext","FormattedDocstring","title","props","text","trim","replace","split","body","lines","shift","join","trimLeft","this","style","border","background","fontSize","Component","ActorsPage","currentFilterType","currentFilterValue","activeFilters","refs","currentItem","scrollToElement","history","search","current","scrollIntoView","behavior","block","setState","toggleExpand","item","expandProp","expandType","expanded","actors","isFiltered","length","some","filter","lowerCurrentFilterValue","value","toLowerCase","type","tags","e","includes","consumes","produces","name","class_name","renderItem","index","Fragment","key","expandText","description","messages","Grid","Row","Col","sm","map","Button","bsStyle","href","ref","ListView","Item","actions","leftContent","Icon","additionalInfo","renderAdditionalInfoExpandItems","heading","stacked","compoundExpand","compoundExpanded","onCloseCompoundExpand","closeExpand","getOptions","Set","flat","sort","concat","addFilter","filterType","filterValue","removeFilter","filters","clearFilters","onTypeAheadChanged","label","prevProps","prevState","InfoItem","Expand","toggleExpanded","className","renderDescription","renderMessages","discover","repo","fluid","Toolbar","Filter","TypeSelector","filterTypes","onFilterTypeSelected","next","TypeAheadSelect","id","options","allowNew","clearButton","selected","placeholder","onChange","Results","ActiveLabel","List","onRemove","filterData","onClick","preventDefault","bind","updated","reduce","store","a","createRef","ActorsPageWithRouter","withRouter","ActorsPageWithContext","Consumer","context","ModelsPage","models","topic","actor","Object","entries","fields","field","removeFilterMessageOnly","conditionalFilter","Form","FormGroup","Checkbox","checked","findIndex","target","renderToolbar","allModels","lookup","assign","m","forEach","push","ModelsPageWithRouterContext","ModelsPageWithContext","TagsPage","TagsPageWithContext","TopicsPage","topics","message","TopicsPageWithContext","WorkflowsPage","workflows","renderActions","width","phases","phase","indexOf","tag","WorkflowsPageWithContext","DiscoverProvider","refreshData","res","data","axios","get","maxRedirects","Provider","children","App","handleNavClick","event","currentTarget","getAttribute","renderContent","allRoutes","menu","exact","path","to","component","subItems","secondaryItem","subIndex","from","navigateTo","iconClass","Actors","Models","Tags","Topics","Workflows","vertNavItems","active","pathname","subItemActive","subItem","VerticalNavItem","VerticalNavSecondaryItem","VerticalNav","persistentSecondary","VerticalNavMasthead","VerticalNavBrand","iconImg","leappDashboardLogo","createStore","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.26d73a3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leapp-dashboard-logo.10431d4c.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst DiscoverContext = React.createContext();\nexport default DiscoverContext;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class FormattedDocstring extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired\n  };\n\n  title = () =>\n    this.props.text\n      .trim('\\n')\n      .replace('\\t', '    ')\n      .split('\\n')[0];\n\n  body = () => {\n    const lines = this.props.text\n      .trim('\\n')\n      .replace('\\t', '    ')\n      .split('\\n');\n    lines.shift();\n    return `    ${lines.join('\\n').trimLeft('\\n')}`;\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>{this.title()}</h3>\n        <pre style={{ border: 'none', background: 'inherit', fontSize: '1em' }}>{this.body()}</pre>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Button, Grid, ListView, Toolbar, Filter, TypeAheadSelect } from 'patternfly-react';\nimport DiscoverContext from '../DiscoverContext';\n\nimport FormattedDocstring from '../components/FormattedDocstring';\n\nclass ActorsPage extends Component {\n  static propTypes = {\n    discover: PropTypes.array.isRequired,\n    history: PropTypes.object.isRequired\n  };\n  state = {\n    currentFilterType: 'Name',\n    currentFilterValue: '',\n    activeFilters: [],\n    refs: {},\n    currentItem: ''\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    const actors = props.discover.map(repo => repo.actors).flat();\n    let updated = false;\n    const refs = actors.reduce((store, a) => {\n      if (!store[a.class_name]) {\n        store[a.class_name] = React.createRef();\n        updated = true;\n      }\n      return store;\n    }, state.refs || {});\n    if (updated) {\n      return { refs };\n    }\n    return null;\n  }\n\n  scrollToElement = () => {\n    const { refs } = this.state;\n    const currentItem = this.props.history.location.search.replace(/\\?/g, '');\n    if (currentItem !== this.state.currentItem && refs[currentItem] && refs[currentItem].current) {\n      refs[currentItem].current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      this.setState({ currentItem });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    this.scrollToElement();\n  }\n\n  componentDidMount() {\n    this.scrollToElement();\n  }\n\n  toggleExpand = (item, expandProp) => {\n    if (expandProp === item.expandType) {\n      item.expanded = !item.expanded;\n    } else {\n      item.expanded = true;\n      item.expandType = expandProp;\n    }\n    this.setState({ actors: this.state.actors });\n  };\n\n  closeExpand(item) {\n    item.expanded = false;\n    this.setState({ actors: this.state.actors });\n  }\n\n  renderDescription(item) {\n    return (\n      <ListView.InfoItem key=\"description\">\n        <ListView.Expand\n          expanded={item.expanded && item.expandType === 'description'}\n          toggleExpanded={() => {\n            this.toggleExpand(item, 'description');\n          }}\n        >\n          <span className=\"fa fa-info\" />\n          <strong>Description</strong>\n        </ListView.Expand>\n      </ListView.InfoItem>\n    );\n  }\n\n  renderMessages(item) {\n    return (\n      <ListView.InfoItem key=\"messages\">\n        <ListView.Expand\n          expanded={item.expanded && item.expandType === 'messages'}\n          toggleExpanded={() => {\n            this.toggleExpand(item, 'messages');\n          }}\n        >\n          <span className=\"fa fa-comments\" />\n          <strong>Messages</strong>\n        </ListView.Expand>\n      </ListView.InfoItem>\n    );\n  }\n\n  renderAdditionalInfoExpandItems(item) {\n    return (\n      <React.Fragment key=\"extra\">\n        {this.renderDescription(item)}\n        {this.renderMessages(item)}\n      </React.Fragment>\n    );\n  }\n\n  isFiltered = item => {\n    const { activeFilters } = this.state;\n    if (!activeFilters.length) {\n      return false;\n    }\n    return activeFilters.some(filter => {\n      const lowerCurrentFilterValue = filter.value.toLowerCase();\n      switch (filter.type) {\n        case 'Tag':\n          return !item.tags.some(e => e.toLowerCase().includes(lowerCurrentFilterValue));\n        case 'Consumes':\n          return !item.consumes.some(e => e.toLowerCase().includes(lowerCurrentFilterValue));\n        case 'Produces':\n          return !item.produces.some(e => e.toLowerCase().includes(lowerCurrentFilterValue));\n        case 'Model':\n          return !(\n            item.produces.some(e => e.toLowerCase().includes(lowerCurrentFilterValue)) ||\n            item.consumes.some(e => e.toLowerCase().includes(lowerCurrentFilterValue))\n          );\n        case 'Name':\n          return !(\n            item.name.toLowerCase().includes(lowerCurrentFilterValue) ||\n            item.class_name.toLowerCase().includes(lowerCurrentFilterValue)\n          );\n        default:\n          break;\n      }\n      return true;\n    });\n  };\n\n  renderItem = (item, index) => {\n    if (this.isFiltered(item)) {\n      return <React.Fragment key={index} />;\n    }\n    function renderMessageExpand() {\n      return (\n        <Grid.Row>\n          <Grid.Col sm={6}>\n            <strong>Consumes</strong>\n            <ul>\n              {item.consumes.map(e => (\n                <li key={`consumed-${e}`}>\n                  <Button bsStyle=\"link\" href={`#/models?${e}`}>\n                    {e}\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </Grid.Col>\n          <Grid.Col sm={6}>\n            <strong>Produces</strong>\n            <ul>\n              {item.produces.map(e => (\n                <li key={`produced-${e}`}>\n                  <Button bsStyle=\"link\" href={`#/models?${e}`}>\n                    {e}\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </Grid.Col>\n        </Grid.Row>\n      );\n    }\n\n    const expandText = {\n      description: () => <FormattedDocstring text={item.description} />,\n      messages: renderMessageExpand\n    }[item.expandType || 'description'];\n\n    function renderActions() {\n      return <div />;\n    }\n    const style = this.state.currentItem === item.class_name ? { border: '1px solid #0088ce' } : {};\n    return (\n      <div key={index} ref={this.state.refs[item.class_name]} style={style}>\n        <ListView.Item\n          actions={renderActions()}\n          leftContent={<ListView.Icon name=\"star\" />}\n          additionalInfo={[this.renderAdditionalInfoExpandItems(item)]}\n          heading={item.class_name}\n          // description={item.description}\n          stacked\n          compoundExpand\n          compoundExpanded={item.expanded}\n          onCloseCompoundExpand={() => this.closeExpand(item)}\n        >\n          <Grid.Row>\n            <Grid.Col sm={11}>{expandText()}</Grid.Col>\n          </Grid.Row>\n        </ListView.Item>\n      </div>\n    );\n  };\n\n  getOptions = actors => {\n    const { currentFilterType } = this.state;\n    switch (currentFilterType) {\n      case 'Name':\n        return [...new Set(actors.map(e => e.class_name).flat())].sort();\n      case 'Tag':\n        return [...new Set(actors.map(e => e.tags).flat())].sort();\n      case 'Produces':\n        return [...new Set(actors.map(e => e.produces).flat())].sort();\n      case 'Consumes':\n        return [...new Set(actors.map(e => e.consumes).flat())].sort();\n      case 'Model':\n        return [...new Set(actors.map(e => e.consumes.concat(e.produces)).flat())].sort();\n      default:\n        break;\n    }\n    return [];\n  };\n\n  addFilter = (filterType, filterValue) => {\n    this.setState({\n      activeFilters: [\n        ...this.state.activeFilters,\n        {\n          type: filterType,\n          value: filterValue,\n          text: `${filterType}: ${filterValue}`\n        }\n      ]\n    });\n  };\n\n  removeFilter = current => {\n    const { activeFilters } = this.state;\n    const filters = activeFilters.filter(e => current !== e);\n    this.setState({ activeFilters: filters });\n  };\n\n  clearFilters = () => {\n    this.setState({\n      activeFilters: []\n    });\n  };\n\n  onTypeAheadChanged = e => {\n    const { currentFilterType } = this.state;\n    let value = '';\n    // if (e.length) value = e[0].label;\n    if (e.length) {\n      if (typeof e[0] === 'string') {\n        // eslint-disable-next-line prefer-destructuring\n        value = e[0];\n      } else {\n        value = e[0].label;\n      }\n      this.addFilter(currentFilterType, value);\n      this.setState({ currentFilterValue: '' });\n      return true;\n    }\n    return false;\n  };\n\n  render() {\n    const actors = this.props.discover.map(repo => repo.actors).flat();\n    const { activeFilters, currentFilterType, currentFilterValue } = this.state;\n    return (\n      <Grid fluid className=\"container-pf-nav-pf-vertical\">\n        <Toolbar>\n          <Filter>\n            <Filter.TypeSelector\n              filterTypes={['Name', 'Tag', 'Model', 'Produces', 'Consumes']}\n              currentFilterType={currentFilterType}\n              onFilterTypeSelected={next => {\n                this.setState({ currentFilterType: next });\n              }}\n            />\n            <TypeAheadSelect\n              id=\"actors-search\"\n              options={this.getOptions(actors)}\n              type={currentFilterType}\n              allowNew\n              clearButton\n              selected={[currentFilterValue]}\n              placeholder={currentFilterType}\n              onChange={this.onTypeAheadChanged}\n            />\n          </Filter>\n          {activeFilters && activeFilters.length > 0 && (\n            <Toolbar.Results>\n              <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n              <Filter.List>\n                {activeFilters.map((item, index) => (\n                  <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                    {item.text}\n                  </Filter.Item>\n                ))}\n              </Filter.List>\n              <Button\n                bsStyle=\"link\"\n                onClick={e => {\n                  e.preventDefault();\n                  this.clearFilters();\n                }}\n              >\n                Clear All Filters\n              </Button>\n            </Toolbar.Results>\n          )}{' '}\n        </Toolbar>\n        <ListView>{actors.map(this.renderItem.bind(this))}</ListView>\n      </Grid>\n    );\n  }\n}\n\nconst ActorsPageWithRouter = withRouter(ActorsPage);\n\nfunction ActorsPageWithContext() {\n  return <DiscoverContext.Consumer>{context => <ActorsPageWithRouter discover={context} />}</DiscoverContext.Consumer>;\n}\n\nexport default ActorsPageWithContext;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Button, Grid, ListView, Toolbar, Filter, TypeAheadSelect, Form } from 'patternfly-react';\nimport DiscoverContext from '../DiscoverContext';\n// import { EmptyStateComponent } from '../components/EmptyStateComponent';\n\nclass ModelsPage extends Component {\n  static propTypes = {\n    discover: PropTypes.array.isRequired,\n    history: PropTypes.object.isRequired\n  };\n\n  state = {\n    currentFilterType: 'Name',\n    currentFilterValue: '',\n    activeFilters: [],\n    refs: {},\n    currentItem: ''\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    const models = props.discover.map(repo => repo.models).flat();\n    let updated = false;\n    const refs = models.reduce((store, a) => {\n      if (!store[a.class_name]) {\n        store[a.class_name] = React.createRef();\n        updated = true;\n      }\n      return store;\n    }, state.refs || {});\n    if (updated) {\n      return { refs };\n    }\n    return null;\n  }\n\n  scrollToElement = () => {\n    const { refs } = this.state;\n    const currentItem = this.props.history.location.search.replace(/\\?/g, '');\n    if (currentItem !== this.state.currentItem && refs[currentItem] && refs[currentItem].current) {\n      refs[currentItem].current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      this.setState({ currentItem });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    this.scrollToElement();\n  }\n\n  componentDidMount() {\n    this.scrollToElement();\n  }\n\n  toggleExpand = (item, expandProp) => {\n    if (expandProp === item.expandType) {\n      item.expanded = !item.expanded;\n    } else {\n      item.expanded = true;\n      item.expandType = expandProp;\n    }\n    this.setState({ models: this.state.models });\n  };\n\n  closeExpand(item) {\n    item.expanded = false;\n    this.setState({ models: this.state.models });\n  }\n\n  renderDescription(item) {\n    return (\n      <ListView.InfoItem key=\"details\">\n        <ListView.Expand\n          expanded={item.expanded && item.expandType === 'details'}\n          toggleExpanded={() => {\n            this.toggleExpand(item, 'details');\n          }}\n        >\n          <span className=\"fa fa-info\" />\n          <strong>Details</strong>\n        </ListView.Expand>\n      </ListView.InfoItem>\n    );\n  }\n\n  renderAdditionalInfoExpandItems(item) {\n    return <React.Fragment key=\"extra\">{this.renderDescription(item)}</React.Fragment>;\n  }\n\n  isFiltered = item => {\n    const { activeFilters } = this.state;\n    if (!activeFilters.length) {\n      return false;\n    }\n    return activeFilters.some(filter => {\n      const lowerCurrentFilterValue = filter.value.toLowerCase();\n      switch (filter.type) {\n        case 'Message Only':\n          return !(item.actors.length > 0 && filter.value === 'Yes');\n        case 'Topic':\n          if (item.topic) {\n            return !item.topic.toLowerCase().includes(lowerCurrentFilterValue);\n          }\n          break;\n        case 'Name':\n          return !item.class_name.toLowerCase().includes(lowerCurrentFilterValue);\n        default:\n          break;\n      }\n      return true;\n    });\n  };\n\n  renderItem = (item, index) => {\n    if (this.isFiltered(item)) {\n      return <React.Fragment key={index} />;\n    }\n\n    function renderActions() {\n      return <div />;\n    }\n\n    const style = this.state.currentItem === item.class_name ? { border: '1px solid #0088ce' } : {};\n    return (\n      <div key={index} ref={this.state.refs[item.class_name]} style={style}>\n        <ListView.Item\n          key={index}\n          actions={renderActions()}\n          leftContent={<ListView.Icon name=\"star\" />}\n          additionalInfo={[this.renderAdditionalInfoExpandItems(item)]}\n          heading={item.class_name}\n          // description={item.description}\n          stacked\n          compoundExpand\n          compoundExpanded={item.expanded}\n          onCloseCompoundExpand={() => this.closeExpand(item)}\n        >\n          <Grid.Row>\n            <Grid.Col sm={11}>\n              <Grid.Row>\n                { item.description ? \n                <Grid.Col sm={12}>\n                  <strong>Description:</strong>\n                  <pre>\n                    {item.description || 'No description has been provided for this actor.'}\n                  </pre>\n                </Grid.Col>: <div/>}\n              </Grid.Row> \n              <Grid.Row>\n                <Grid.Col sm={6}>\n                  <strong>Consumed by</strong>\n                  <ul>\n                    {item.actors.map(actor =>\n                      actor.consumes\n                        .filter(e => item.class_name === e)\n                        .map(e => (\n                          <li key={`consumed-${actor.class_name}-${e}`}>\n                            {' '}\n                            <Button bsStyle=\"link\" href={`#/?${actor.class_name}`}>\n                              {actor.class_name}\n                            </Button>\n                          </li>\n                        ))\n                    )}\n                  </ul>\n                </Grid.Col>\n                <Grid.Col sm={6}>\n                  <strong>Produced by</strong>\n                  <ul>\n                    {item.actors.map(actor =>\n                      actor.produces\n                        .filter(e => item.class_name === e)\n                        .map(e => (\n                          <li key={`produced-${actor.class_name}-${e}`}>\n                            <Button bsStyle=\"link\" href={`#/?${actor.class_name}`}>\n                              {actor.class_name}\n                            </Button>\n                          </li>\n                        ))\n                    )}\n                  </ul>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col sm={6}>\n                  <strong>Fields</strong>\n                  <ul>\n                    {Object.entries(item.fields || {}).map(([name, field]) => \n                      <li key={`model-${item.class_name}-field-${name}`}>{name} <i>[{field.class_name}]</i></li>\n                    )}\n                  </ul>\n                </Grid.Col>\n                <Grid.Col sm={6}>\n                </Grid.Col>\n              </Grid.Row>                      \n            </Grid.Col>\n          </Grid.Row>\n        </ListView.Item>\n      </div>\n    );\n  };\n\n  getOptions = models => {\n    const { currentFilterType } = this.state;\n    switch (currentFilterType) {\n      case 'Name':\n        return [...new Set(models.map(e => e.class_name).flat())].sort();\n      case 'Topic':\n        return [...new Set(models.map(e => e.topic))].filter(e => !!e).sort();\n      default:\n        break;\n    }\n    return [];\n  };\n\n  addFilter = (filterType, filterValue) => {\n    this.setState({\n      activeFilters: [\n        ...this.state.activeFilters,\n        {\n          type: filterType,\n          value: filterValue,\n          text: `${filterType}: ${filterValue}`\n        }\n      ]\n    });\n  };\n\n  removeFilterMessageOnly = then => {\n    const { activeFilters } = this.state;\n    const filters = activeFilters.filter(e => e.type !== 'Message Only');\n    return this.setState({ activeFilters: filters }, then);\n  };\n\n  removeFilter = current => {\n    const { activeFilters } = this.state;\n    const filters = activeFilters.filter(e => current !== e);\n    this.setState({ activeFilters: filters });\n  };\n\n  clearFilters = () => {\n    this.setState({\n      activeFilters: []\n    });\n  };\n\n  onTypeAheadChanged = e => {\n    const { currentFilterType } = this.state;\n    let value = '';\n    // if (e.length) value = e[0].label;\n    if (e.length) {\n      if (typeof e[0] === 'string') {\n        // eslint-disable-next-line prefer-destructuring\n        value = e[0];\n      } else {\n        value = e[0].label;\n      }\n      this.addFilter(currentFilterType, value);\n      this.setState({ currentFilterValue: '' });\n      return true;\n    }\n    return false;\n  };\n\n  conditionalFilter = models => {\n    const { currentFilterType, currentFilterValue, activeFilters } = this.state;\n    if (currentFilterType === 'Message Only') {\n      return (\n        <Form.FormGroup>\n          <Form.Checkbox\n            checked={activeFilters.findIndex(e => e.type === currentFilterType) !== -1}\n            onChange={e => {\n              const { checked } = e.target;\n              this.removeFilterMessageOnly(() => {\n                if (checked) {\n                  this.addFilter(currentFilterType, checked ? 'Yes' : 'No');\n                }\n              });\n            }}\n          >\n            Messages Only\n          </Form.Checkbox>\n        </Form.FormGroup>\n      );\n    }\n    return (\n      <TypeAheadSelect\n        id=\"woot\"\n        options={this.getOptions(models)}\n        type={currentFilterType}\n        allowNew\n        clearButton\n        selected={[currentFilterValue]}\n        placeholder={currentFilterType}\n        onChange={this.onTypeAheadChanged}\n      />\n    );\n  };\n\n  renderToolbar = models => {\n    const { activeFilters, currentFilterType } = this.state;\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={['Name', 'Topic', 'Message Only']}\n            currentFilterType={currentFilterType}\n            onFilterTypeSelected={next => {\n              this.setState({\n                currentFilterType: next,\n                activeFilters\n              });\n            }}\n          />\n          {this.conditionalFilter(models)}\n        </Filter>\n        {activeFilters && activeFilters.length > 0 && (\n          <Toolbar.Results>\n            <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n            <Filter.List>\n              {activeFilters.map((item, index) => (\n                <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                  {item.text}\n                </Filter.Item>\n              ))}\n            </Filter.List>\n            <Button\n              bsStyle=\"link\"\n              onClick={e => {\n                e.preventDefault();\n                this.clearFilters();\n              }}\n            >\n              Clear All Filters\n            </Button>\n          </Toolbar.Results>\n        )}{' '}\n      </Toolbar>\n    );\n  };\n\n  render() {\n    const allModels = this.props.discover\n      .map(repo => repo.models)\n      .concat([{ class_name: 'Report' }, { class_name: 'DialogModel' }])\n      .flat();\n    const actors = this.props.discover.map(repo => repo.actors).flat();\n    // eslint-disable-next-line prefer-const\n    let lookup = Object.assign({}, ...allModels.map(m => ({ [m.class_name]: [] })));\n    actors.forEach(a => {\n      a.produces.forEach(m => {\n        lookup[m].push(a);\n      });\n      a.consumes.forEach(m => lookup[m].push(a));\n    });\n    const models = allModels.map(m => Object.assign(m, { actors: lookup[m.class_name] }));\n\n    return (\n      <Grid fluid className=\"container-pf-nav-pf-vertical\">\n        {this.renderToolbar(models)}\n        <ListView>{models.map(this.renderItem.bind(this))}</ListView>\n      </Grid>\n    );\n  }\n}\n\nconst ModelsPageWithRouterContext = withRouter(ModelsPage);\n\nfunction ModelsPageWithContext() {\n  return (\n    <DiscoverContext.Consumer>{context => <ModelsPageWithRouterContext discover={context} />}</DiscoverContext.Consumer>\n  );\n}\n\nexport default ModelsPageWithContext;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Grid, ListView, Toolbar, Filter, TypeAheadSelect } from 'patternfly-react';\nimport DiscoverContext from '../DiscoverContext';\n\n// import { EmptyStateComponent } from '../components/EmptyStateComponent';\n\nclass TagsPage extends Component {\n  static propTypes = {\n    discover: PropTypes.array.isRequired\n  };\n  state = {\n    currentFilterType: 'Name',\n    currentFilterValue: '',\n    activeFilters: []\n  };\n\n  toggleExpand = (item, expandProp) => {\n    if (expandProp === item.expandType) {\n      item.expanded = !item.expanded;\n    } else {\n      item.expanded = true;\n      item.expandType = expandProp;\n    }\n    this.setState({ tags: this.state.tags });\n  };\n\n  closeExpand(item) {\n    item.expanded = false;\n    this.setState({ tags: this.state.tags });\n  }\n\n  renderDescription(item) {\n    return (\n      <ListView.InfoItem key=\"details\">\n        <ListView.Expand\n          expanded={item.expanded && item.expandType === 'details'}\n          toggleExpanded={() => {\n            this.toggleExpand(item, 'details');\n          }}\n        >\n          <span className=\"fa fa-info\" />\n          <strong>Details</strong>\n        </ListView.Expand>\n      </ListView.InfoItem>\n    );\n  }\n\n  renderAdditionalInfoExpandItems(item) {\n    return <React.Fragment key=\"extra\">{this.renderDescription(item)}</React.Fragment>;\n  }\n\n  isFiltered = item => {\n    const { activeFilters } = this.state;\n    if (!activeFilters.length) {\n      return false;\n    }\n    return activeFilters.some(filter => {\n      const lowerCurrentFilterValue = filter.value.toLowerCase();\n      switch (filter.type) {\n        case 'Name':\n          return !item.class_name.toLowerCase().includes(lowerCurrentFilterValue);\n        default:\n          break;\n      }\n      return true;\n    });\n  };\n\n  renderItem = (item, index) => {\n    if (this.isFiltered(item)) {\n      return <React.Fragment key={index} />;\n    }\n\n    function renderActions() {\n      return <div />;\n    }\n\n    return (\n      <ListView.Item\n        key={index}\n        actions={renderActions()}\n        leftContent={<ListView.Icon name=\"star\" />}\n        additionalInfo={[this.renderAdditionalInfoExpandItems(item)]}\n        heading={item.class_name}\n        // description={item.description}\n        stacked\n        compoundExpand\n        compoundExpanded={item.expanded}\n        onCloseCompoundExpand={() => this.closeExpand(item)}\n      >\n        <Grid.Row>\n          <Grid.Col sm={11}>\n            <Grid.Row>\n              <Grid.Col sm={6}>\n                <strong>Actors using {item.class_name}:</strong>\n                <ul>\n                  {item.actors.map(actor => (\n                    <li key={`phase-tag-${actor}-${item.class_name}`}>\n                      <Button bsStyle=\"link\" href={`#/?${actor}`}>\n                        {actor}\n                      </Button>\n                    </li>\n                  ))}\n                </ul>\n              </Grid.Col>\n            </Grid.Row>\n          </Grid.Col>\n        </Grid.Row>\n      </ListView.Item>\n    );\n  };\n\n  getOptions = tags => {\n    const { currentFilterType } = this.state;\n    switch (currentFilterType) {\n      case 'Name':\n        return [...new Set(tags.map(e => e.class_name).flat())].sort();\n      default:\n        break;\n    }\n    return [];\n  };\n\n  addFilter = (filterType, filterValue) => {\n    this.setState({\n      activeFilters: [\n        ...this.state.activeFilters,\n        {\n          type: filterType,\n          value: filterValue,\n          text: `${filterType}: ${filterValue}`\n        }\n      ]\n    });\n  };\n\n  removeFilter = current => {\n    const { activeFilters } = this.state;\n    const filters = activeFilters.filter(e => current !== e);\n    this.setState({ activeFilters: filters });\n  };\n\n  clearFilters = () => {\n    this.setState({\n      activeFilters: []\n    });\n  };\n\n  onTypeAheadChanged = e => {\n    const { currentFilterType } = this.state;\n    let value = '';\n    // if (e.length) value = e[0].label;\n    if (e.length) {\n      if (typeof e[0] === 'string') {\n        // eslint-disable-next-line prefer-destructuring\n        value = e[0];\n      } else {\n        value = e[0].label;\n      }\n      this.addFilter(currentFilterType, value);\n      this.setState({ currentFilterValue: '' });\n      return true;\n    }\n    return false;\n  };\n\n  conditionalFilter = tags => {\n    const { currentFilterType, currentFilterValue } = this.state;\n    return (\n      <TypeAheadSelect\n        id=\"tags-select\"\n        options={this.getOptions(tags)}\n        type={currentFilterType}\n        allowNew\n        clearButton\n        selected={[currentFilterValue]}\n        placeholder={currentFilterType}\n        onChange={this.onTypeAheadChanged}\n      />\n    );\n  };\n\n  renderToolbar = tags => {\n    const { activeFilters, currentFilterType } = this.state;\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={['Name']}\n            currentFilterType={currentFilterType}\n            onFilterTypeSelected={next => {\n              this.setState({\n                currentFilterType: next,\n                activeFilters\n              });\n            }}\n          />\n          {this.conditionalFilter(tags)}\n        </Filter>\n        {activeFilters && activeFilters.length > 0 && (\n          <Toolbar.Results>\n            <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n            <Filter.List>\n              {activeFilters.map((item, index) => (\n                <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                  {item.text}\n                </Filter.Item>\n              ))}\n            </Filter.List>\n            <Button\n              bsStyle=\"link\"\n              onClick={e => {\n                e.preventDefault();\n                this.clearFilters();\n              }}\n            >\n              Clear All Filters\n            </Button>\n          </Toolbar.Results>\n        )}{' '}\n      </Toolbar>\n    );\n  };\n\n  render() {\n    const tags = this.props.discover.map(repo => repo.tags).flat();\n    return (\n      <Grid fluid className=\"container-pf-nav-pf-vertical\">\n        {this.renderToolbar(tags)}\n        <ListView>{tags.map(this.renderItem.bind(this))}</ListView>\n      </Grid>\n    );\n  }\n}\n\nfunction TagsPageWithContext() {\n  return <DiscoverContext.Consumer>{context => <TagsPage discover={context} />}</DiscoverContext.Consumer>;\n}\n\nexport default TagsPageWithContext;\n","import React, { Component } from 'react';\nimport { Button, Grid, ListView, Toolbar, Filter, TypeAheadSelect } from 'patternfly-react';\nimport PropTypes from 'prop-types';\n\nimport DiscoverContext from '../DiscoverContext';\n\n// import { EmptyStateComponent } from '../components/EmptyStateComponent';\n\nclass TopicsPage extends Component {\n  static propTypes = {\n    discover: PropTypes.array.isRequired\n  };\n\n  state = {\n    currentFilterType: 'Name',\n    currentFilterValue: '',\n    activeFilters: []\n  };\n\n  toggleExpand = (item, expandProp) => {\n    if (expandProp === item.expandType) {\n      item.expanded = !item.expanded;\n    } else {\n      item.expanded = true;\n      item.expandType = expandProp;\n    }\n    this.setState({ topics: this.state.topics });\n  };\n\n  closeExpand(item) {\n    item.expanded = false;\n    this.setState({ topics: this.state.topics });\n  }\n\n  renderDescription(item) {\n    return (\n      <ListView.InfoItem key=\"details\">\n        <ListView.Expand\n          expanded={item.expanded && item.expandType === 'details'}\n          toggleExpanded={() => {\n            this.toggleExpand(item, 'details');\n          }}\n        >\n          <span className=\"fa fa-info\" />\n          <strong>Details</strong>\n        </ListView.Expand>\n      </ListView.InfoItem>\n    );\n  }\n\n  renderAdditionalInfoExpandItems(item) {\n    return <React.Fragment key=\"extra\">{this.renderDescription(item)}</React.Fragment>;\n  }\n\n  isFiltered = item => {\n    const { activeFilters } = this.state;\n    if (!activeFilters.length) {\n      return false;\n    }\n    return activeFilters.some(filter => {\n      const lowerCurrentFilterValue = filter.value.toLowerCase();\n      switch (filter.type) {\n        case 'Name':\n          return !item.class_name.toLowerCase().includes(lowerCurrentFilterValue);\n        default:\n          break;\n      }\n      return true;\n    });\n  };\n\n  renderItem = (item, index) => {\n    if (this.isFiltered(item)) {\n      return <React.Fragment key={index} />;\n    }\n\n    function renderActions() {\n      return <div />;\n    }\n\n    return (\n      <ListView.Item\n        key={index}\n        actions={renderActions()}\n        leftContent={<ListView.Icon name=\"star\" />}\n        additionalInfo={[this.renderAdditionalInfoExpandItems(item)]}\n        heading={item.class_name}\n        // description={item.description}\n        stacked\n        compoundExpand\n        compoundExpanded={item.expanded}\n        onCloseCompoundExpand={() => this.closeExpand(item)}\n      >\n        <Grid.Row>\n          <Grid.Col sm={11}>\n            <Grid.Row>\n              <Grid.Col sm={6}>\n                <strong>Models using {item.class_name}:</strong>\n                <ul>\n                  {item.messages.map(message => (\n                    <li key={`message-topic-${message}-${item.class_name}`}>\n                      <Button bsStyle=\"link\" href={`#/models?${message}`}>\n                        {message}\n                      </Button>\n                    </li>\n                  ))}\n                </ul>\n              </Grid.Col>\n            </Grid.Row>\n          </Grid.Col>\n        </Grid.Row>\n      </ListView.Item>\n    );\n  };\n\n  getOptions = topics => {\n    const { currentFilterType } = this.state;\n    switch (currentFilterType) {\n      case 'Name':\n        return [...new Set(topics.map(e => e.class_name).flat())].sort();\n      default:\n        break;\n    }\n    return [];\n  };\n\n  addFilter = (filterType, filterValue) => {\n    this.setState({\n      activeFilters: [\n        ...this.state.activeFilters,\n        {\n          type: filterType,\n          value: filterValue,\n          text: `${filterType}: ${filterValue}`\n        }\n      ]\n    });\n  };\n\n  removeFilter = current => {\n    const { activeFilters } = this.state;\n    const filters = activeFilters.filter(e => current !== e);\n    this.setState({ activeFilters: filters });\n  };\n\n  clearFilters = () => {\n    this.setState({\n      activeFilters: []\n    });\n  };\n\n  onTypeAheadChanged = e => {\n    const { currentFilterType } = this.state;\n    let value = '';\n    // if (e.length) value = e[0].label;\n    if (e.length) {\n      if (typeof e[0] === 'string') {\n        // eslint-disable-next-line prefer-destructuring\n        value = e[0];\n      } else {\n        value = e[0].label;\n      }\n      this.addFilter(currentFilterType, value);\n      this.setState({ currentFilterValue: '' });\n      return true;\n    }\n    return false;\n  };\n\n  conditionalFilter = topics => {\n    const { currentFilterType, currentFilterValue } = this.state;\n    return (\n      <TypeAheadSelect\n        id=\"topics-select\"\n        options={this.getOptions(topics)}\n        type={currentFilterType}\n        allowNew\n        clearButton\n        selected={[currentFilterValue]}\n        placeholder={currentFilterType}\n        onChange={this.onTypeAheadChanged}\n      />\n    );\n  };\n\n  renderToolbar = topics => {\n    const { activeFilters, currentFilterType } = this.state;\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={['Name']}\n            currentFilterType={currentFilterType}\n            onFilterTypeSelected={next => {\n              this.setState({\n                currentFilterType: next,\n                activeFilters\n              });\n            }}\n          />\n          {this.conditionalFilter(topics)}\n        </Filter>\n        {activeFilters && activeFilters.length > 0 && (\n          <Toolbar.Results>\n            <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n            <Filter.List>\n              {activeFilters.map((item, index) => (\n                <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                  {item.text}\n                </Filter.Item>\n              ))}\n            </Filter.List>\n            <Button\n              bsStyle=\"link\"\n              onClick={e => {\n                e.preventDefault();\n                this.clearFilters();\n              }}\n            >\n              Clear All Filters\n            </Button>\n          </Toolbar.Results>\n        )}{' '}\n      </Toolbar>\n    );\n  };\n\n  render() {\n    const topics = this.props.discover.map(repo => repo.topics).flat();\n    return (\n      <Grid fluid className=\"container-pf-nav-pf-vertical\">\n        {this.renderToolbar(topics)}\n        <ListView>{topics.map(this.renderItem.bind(this))}</ListView>\n      </Grid>\n    );\n  }\n}\n\nfunction TopicsPageWithContext() {\n  return <DiscoverContext.Consumer>{context => <TopicsPage discover={context} />}</DiscoverContext.Consumer>;\n}\n\nexport default TopicsPageWithContext;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Grid, ListView, Toolbar, Filter, TypeAheadSelect } from 'patternfly-react';\nimport DiscoverContext from '../DiscoverContext';\n\n// import { EmptyStateComponent } from '../components/EmptyStateComponent';\n\nclass WorkflowsPage extends Component {\n  static propTypes = {\n    discover: PropTypes.array.isRequired\n  };\n\n  state = {\n    currentFilterType: 'Name',\n    currentFilterValue: '',\n    activeFilters: []\n  };\n\n  toggleExpand = (item, expandProp) => {\n    if (expandProp === item.expandType) {\n      item.expanded = !item.expanded;\n    } else {\n      item.expanded = true;\n      item.expandType = expandProp;\n    }\n    this.setState({ workflows: this.state.workflows });\n  };\n\n  closeExpand(item) {\n    item.expanded = false;\n    this.setState({ workflows: this.state.workflows });\n  }\n\n  renderDescription(item) {\n    return (\n      <ListView.InfoItem key=\"details\">\n        <ListView.Expand\n          expanded={item.expanded && item.expandType === 'details'}\n          toggleExpanded={() => {\n            this.toggleExpand(item, 'details');\n          }}\n        >\n          <span className=\"fa fa-info\" />\n          <strong>Details</strong>\n        </ListView.Expand>\n      </ListView.InfoItem>\n    );\n  }\n\n  renderAdditionalInfoExpandItems(item) {\n    return <React.Fragment key=\"extra\">{this.renderDescription(item)}</React.Fragment>;\n  }\n\n  isFiltered = item => {\n    const { activeFilters } = this.state;\n    if (!activeFilters.length) {\n      return false;\n    }\n    return activeFilters.some(filter => {\n      const lowerCurrentFilterValue = filter.value.toLowerCase();\n      switch (filter.type) {\n        case 'Name':\n          return !item.class_name.toLowerCase().includes(lowerCurrentFilterValue);\n        default:\n          break;\n      }\n      return true;\n    });\n  };\n\n  renderItem = actors => (item, index) => {\n    if (this.isFiltered(item)) {\n      return <React.Fragment key={index} />;\n    }\n\n    function renderActions() {\n      return <div />;\n    }\n\n    return (\n      <ListView.Item\n        key={index}\n        actions={renderActions()}\n        leftContent={<ListView.Icon name=\"star\" />}\n        additionalInfo={[this.renderAdditionalInfoExpandItems(item)]}\n        heading={item.name}\n        // description={item.description}\n        stacked\n        compoundExpand\n        compoundExpanded={item.expanded}\n        onCloseCompoundExpand={() => this.closeExpand(item)}\n      >\n        <Grid.Row>\n          <Grid.Col sm={11}>\n            <Grid style={{ width: '100%' }}>\n              <Grid.Row>\n                <strong>Phases:</strong>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid style={{ width: '100%' }}>\n                  <Grid.Row>\n                    <ListView>\n                      {item.phases.map(phase => (\n                        <ListView.Item\n                          key={`${index}-${phase.class_name}`}\n                          actions={renderActions()}\n                          leftContent={<ListView.Icon name=\"microchip\" />}\n                          additionalInfo={[\n                            <ListView.InfoItem key=\"details\">\n                              <ListView.Expand\n                                expanded={phase.expanded && phase.expandType === 'details'}\n                                toggleExpanded={() => {\n                                  this.toggleExpand(phase, 'details');\n                                }}\n                              >\n                                <span className=\"fa fa-info\" />\n                                <strong>Workflows</strong>\n                              </ListView.Expand>\n                            </ListView.InfoItem>\n                          ]}\n                          heading={phase.class_name}\n                          // description={item.description}\n                          compoundExpand\n                          compoundExpanded={phase.expanded}\n                          onCloseCompoundExpand={() => this.closeExpand(phase)}\n                        >\n                          <ul>\n                            {actors\n                              .filter(\n                                actor =>\n                                  actor.tags.indexOf(phase.filter.phase) !== -1 && actor.tags.indexOf(item.tag) !== -1\n                              )\n                              .map(actor => (\n                                <li key={`workflows-phase-${phase.class_name}-${actor.class_name}`}>\n                                  <Button bsStyle=\"link\" href={`#/?${actor.class_name}`}>\n                                    {actor.class_name}\n                                  </Button>\n                                </li>\n                              ))}\n                          </ul>\n                        </ListView.Item>\n                      ))}\n                    </ListView>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Row>\n            </Grid>\n          </Grid.Col>\n        </Grid.Row>\n      </ListView.Item>\n    );\n  };\n\n  getOptions = workflows => {\n    const { currentFilterType } = this.state;\n    switch (currentFilterType) {\n      case 'Name':\n        return [...new Set(workflows.map(e => e.name).flat())].sort();\n      default:\n        break;\n    }\n    return [];\n  };\n\n  addFilter = (filterType, filterValue) => {\n    this.setState({\n      activeFilters: [\n        ...this.state.activeFilters,\n        {\n          type: filterType,\n          value: filterValue,\n          text: `${filterType}: ${filterValue}`\n        }\n      ]\n    });\n  };\n\n  removeFilter = current => {\n    const { activeFilters } = this.state;\n    const filters = activeFilters.filter(e => current !== e);\n    this.setState({ activeFilters: filters });\n  };\n\n  clearFilters = () => {\n    this.setState({\n      activeFilters: []\n    });\n  };\n\n  onTypeAheadChanged = e => {\n    const { currentFilterType } = this.state;\n    let value = '';\n    // if (e.length) value = e[0].label;\n    if (e.length) {\n      if (typeof e[0] === 'string') {\n        // eslint-disable-next-line prefer-destructuring\n        value = e[0];\n      } else {\n        value = e[0].label;\n      }\n      this.addFilter(currentFilterType, value);\n      this.setState({ currentFilterValue: '' });\n      return true;\n    }\n    return false;\n  };\n\n  conditionalFilter = workflows => {\n    const { currentFilterType, currentFilterValue } = this.state;\n    return (\n      <TypeAheadSelect\n        id=\"workflow-select\"\n        options={this.getOptions(workflows)}\n        type={currentFilterType}\n        allowNew\n        clearButton\n        selected={[currentFilterValue]}\n        placeholder={currentFilterType}\n        onChange={this.onTypeAheadChanged}\n      />\n    );\n  };\n\n  renderToolbar = workflows => {\n    const { activeFilters, currentFilterType } = this.state;\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={['Name']}\n            currentFilterType={currentFilterType}\n            onFilterTypeSelected={next => {\n              this.setState({\n                currentFilterType: next,\n                activeFilters\n              });\n            }}\n          />\n          {this.conditionalFilter(workflows)}\n        </Filter>\n        {activeFilters && activeFilters.length > 0 && (\n          <Toolbar.Results>\n            <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n            <Filter.List>\n              {activeFilters.map((item, index) => (\n                <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                  {item.text}\n                </Filter.Item>\n              ))}\n            </Filter.List>\n            <Button\n              bsStyle=\"link\"\n              onClick={e => {\n                e.preventDefault();\n                this.clearFilters();\n              }}\n            >\n              Clear All Filters\n            </Button>\n          </Toolbar.Results>\n        )}{' '}\n      </Toolbar>\n    );\n  };\n\n  render() {\n    const workflows = this.props.discover.map(repo => repo.workflows).flat();\n    const actors = this.props.discover.map(repo => repo.actors).flat();\n    return (\n      <Grid fluid className=\"container-pf-nav-pf-vertical\">\n        {this.renderToolbar(workflows)}\n        <ListView>{workflows.map(this.renderItem(actors).bind(this))}</ListView>\n      </Grid>\n    );\n  }\n}\n\nfunction WorkflowsPageWithContext() {\n  return <DiscoverContext.Consumer>{context => <WorkflowsPage discover={context} />}</DiscoverContext.Consumer>;\n}\n\nexport default WorkflowsPageWithContext;\n","import React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nimport DiscoverContext from '../DiscoverContext';\n\nclass DiscoverProvider extends React.Component {\n  static propTypes = {\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired\n  };\n  state = {\n    discover: []\n  };\n\n  refreshData = res => this.setState({ discover: res.data });\n\n  constructor(props) {\n    super(props);\n    axios\n      .get('/api/discover', { maxRedirects: 0 })\n      .then(this.refreshData)\n      .catch(() => {\n        axios\n          .get('/githubio-data/files/discover.json', { maxRedirects: 0 })\n          .then(this.refreshData)\n          .catch(() => {\n            axios.get('api/discover.json').then(this.refreshData);\n          });\n      });\n  }\n\n  render() {\n    const { discover } = this.state;\n    return <DiscoverContext.Provider value={discover}>{this.props.children}</DiscoverContext.Provider>;\n  }\n}\n\nexport default DiscoverProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport {\n  VerticalNav,\n  VerticalNavItem,\n  VerticalNavSecondaryItem,\n  VerticalNavMasthead,\n  VerticalNavBrand\n} from 'patternfly-react';\nimport { routes } from './routes';\nimport leappDashboardLogo from './img/leapp-dashboard-logo.svg';\nimport './App.css';\nimport DiscoverProvider from './components/DiscoverProvider';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.menu = routes();\n  }\n  handleNavClick = event => {\n    event.preventDefault();\n    const target = event.currentTarget;\n    const { history } = this.props;\n    if (target.getAttribute) {\n      const href = target.getAttribute('href');\n      history.push(href);\n    }\n  };\n\n  renderContent = () => {\n    const allRoutes = [];\n    this.menu.map((item, index) => {\n      allRoutes.push(<Route key={index} exact path={item.to} component={item.component} />);\n      if (item.subItems) {\n        item.subItems.map((secondaryItem, subIndex) =>\n          allRoutes.push(<Route key={subIndex} exact path={secondaryItem.to} component={secondaryItem.component} />)\n        );\n      }\n      return allRoutes;\n    });\n\n    return (\n      <DiscoverProvider>\n        <Switch>\n          {allRoutes}\n          <Redirect from=\"*\" to=\"/\" key=\"default-route\" />\n        </Switch>\n      </DiscoverProvider>\n    );\n  };\n\n  navigateTo = path => {\n    const { history } = this.props;\n    history.push(path);\n  };\n\n  render() {\n    const { location } = this.props;\n    const vertNavItems = this.menu.map(item => {\n      const active = location.pathname === item.to;\n      const subItemActive = item.subItems && item.subItems.some(subItem => location.pathname === subItem.to);\n      return (\n        <VerticalNavItem\n          key={item.to}\n          title={item.title}\n          iconClass={item.iconClass}\n          active={active || subItemActive}\n          onClick={() => {\n            if (item.to !== location.pathname) {\n              this.navigateTo(item.to);\n            }\n          }}\n        >\n          {item.subItems &&\n            item.subItems.map(secondaryItem => (\n              <VerticalNavSecondaryItem\n                key={secondaryItem.to}\n                title={secondaryItem.title}\n                iconClass={secondaryItem.iconClass}\n                active={secondaryItem.to === location.pathname}\n                onClick={() => this.navigateTo(secondaryItem.to)}\n              />\n            ))}\n        </VerticalNavItem>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <VerticalNav persistentSecondary={false}>\n          <VerticalNavMasthead>\n            <VerticalNavBrand iconImg={leappDashboardLogo} />\n          </VerticalNavMasthead>\n          {vertNavItems}\n        </VerticalNav>\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired\n};\n\nexport default withRouter(App);\n","// import Dolor from './pages/Dolor';\nimport Actors from './pages/Actors';\nimport Models from './pages/Models';\nimport Tags from './pages/Tags';\nimport Topics from './pages/Topics';\nimport Workflows from './pages/Workflows';\n\nconst baseName = '/';\n\nconst routes = () => [\n  /*  {\n    iconClass: 'fa fa-dashboard',\n    title: 'Ipsum',\n    to: '/',\n    component: Ipsum,\n    subItems: [\n      {\n        iconClass: 'fa fa-envelope-open',\n        title: 'Item 1-A',\n        to: '/ipsum/item-1-A',\n        component: Ipsum1A\n      },\n      {\n        iconClass: 'fa fa-envelope-closed',\n        title: 'Item 1-B',\n        to: '/ipsum/item-1-B',\n        component: Ipsum1B\n      }\n    ]\n  }, */\n  {\n    iconClass: 'fa fa-star',\n    title: 'Actors',\n    to: '/',\n    component: Actors\n  },\n  {\n    iconClass: 'fa fa-sitemap',\n    title: 'Models',\n    to: '/models',\n    component: Models\n  },\n  {\n    iconClass: 'fa fa-tags',\n    title: 'Tags',\n    to: '/tags',\n    component: Tags\n  },\n  {\n    iconClass: 'fa fa-book',\n    title: 'Topics',\n    to: '/topics',\n    component: Topics\n  },\n  {\n    iconClass: 'fa fa-code-fork',\n    title: 'Workflows',\n    to: '/workflows',\n    component: Workflows\n  } /* ,\n  {\n    iconClass: 'fa fa-comments',\n    title: 'Messages',\n    to: '/messages',\n    component: Dolor\n  },\n  {\n    iconClass: 'fa fa-file-text',\n    title: 'Logs',\n    to: '/logs',\n    component: Dolor\n  } */\n];\n\nexport { baseName, routes };\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './App';\n\nconst store = createStore((state = []) => state);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}